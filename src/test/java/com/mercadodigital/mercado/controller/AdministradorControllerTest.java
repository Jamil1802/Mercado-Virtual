package com.mercadodigital.mercado.controller;

import com.mercadodigital.mercado.model.Usuario;
import com.mercadodigital.mercado.repository.UsuarioRepository;
import com.mercadodigital.mercado.service.AdministradorService;
import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AdministradorControllerTest {

    @Mock
    private AdministradorService administradorService;

    @Mock
    private UsuarioRepository usuarioRepository;

    @InjectMocks
    private AdministradorController administradorController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        System.out.println("üõ†Ô∏è Configurando ambiente de teste...");
    }

    @Test
    @DisplayName("üëë Promover para admin - Sucesso")
    void promoverParaAdmin_Sucesso() {
        System.out.println("Teste: Promo√ß√£o para admin bem-sucedida");

        // Arrange
        int userId = 1;
        int adminId = 2;
        Usuario admin = new Usuario(adminId, "Admin", "admin@email.com", "senha", "Endere√ßo");
        admin.setTipoUsuario("ADMIN");

        when(usuarioRepository.findById(adminId)).thenReturn(Optional.of(admin));
        doNothing().when(administradorService).promoverParaAdmin(userId);

        // Act
        ResponseEntity<String> response = administradorController.promoverParaAdmin(userId, adminId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Usu√°rio promovido a administrador", response.getBody());
        verify(administradorService).promoverParaAdmin(userId);
        System.out.println("‚úÖ Teste passou: Promo√ß√£o bem-sucedida");
    }

    @Test
    @DisplayName("üö´ Desativar usu√°rio - Sucesso")
    void desativarUsuario_Sucesso() {
        System.out.println("Teste: Desativa√ß√£o de usu√°rio bem-sucedida");

        // Arrange
        int userId = 1;
        int adminId = 2;
        Usuario admin = new Usuario(adminId, "Admin", "admin@email.com", "senha", "Endere√ßo");
        admin.setTipoUsuario("ADMIN");

        when(usuarioRepository.findById(adminId)).thenReturn(Optional.of(admin));
        doNothing().when(administradorService).desativarUsuario(userId);

        // Act
        ResponseEntity<String> response = administradorController.desativarUsuario(userId, adminId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Usu√°rio desativado com sucesso", response.getBody());
        verify(administradorService).desativarUsuario(userId);
        System.out.println("‚úÖ Teste passou: Desativa√ß√£o bem-sucedida");
    }

    @Test
    @DisplayName("üîÑ Reativar usu√°rio - Sucesso")
    void reativarUsuario_Sucesso() {
        System.out.println("Teste: Reativa√ß√£o de usu√°rio bem-sucedida");

        // Arrange
        int userId = 1;
        int adminId = 2;
        Usuario admin = new Usuario(adminId, "Admin", "admin@email.com", "senha", "Endere√ßo");
        admin.setTipoUsuario("ADMIN");

        when(usuarioRepository.findById(adminId)).thenReturn(Optional.of(admin));
        doNothing().when(administradorService).reativarUsuario(userId);

        // Act
        ResponseEntity<String> response = administradorController.reativarUsuario(userId, adminId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Usu√°rio reativado com sucesso", response.getBody());
        verify(administradorService).reativarUsuario(userId);
        System.out.println("‚úÖ Teste passou: Reativa√ß√£o bem-sucedida");
    }

    @Test
    @DisplayName("üë§ Buscar usu√°rio - Encontrado")
    void buscarUsuario_Encontrado() {
        System.out.println("Teste: Busca de usu√°rio existente");

        // Arrange
        int userId = 1;
        Usuario usuario = new Usuario(userId, "Teste", "teste@email.com", "senha", "Endere√ßo");
        when(administradorService.buscarUsuarioDetalhado(userId)).thenReturn(usuario);

        // Act
        ResponseEntity<Usuario> response = administradorController.buscarUsuarioDetalhado(userId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(userId, response.getBody().getId());
        System.out.println("‚úÖ Teste passou: Usu√°rio encontrado");
    }

    @Test
    @DisplayName("üîç Buscar usu√°rio - N√£o encontrado")
    void buscarUsuario_NaoEncontrado() {
        System.out.println("Teste: Busca de usu√°rio inexistente");

        // Arrange
        int userId = 99;
        when(administradorService.buscarUsuarioDetalhado(userId))
                .thenThrow(new EntityNotFoundException("Usu√°rio n√£o encontrado"));

        // Act
        ResponseEntity<Usuario> response = administradorController.buscarUsuarioDetalhado(userId);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        System.out.println("‚úÖ Teste passou: Usu√°rio n√£o encontrado");
    }

    @Test
    @DisplayName("üö∑ Acesso negado - N√£o admin")
    void acessoNegado_NaoAdmin() {
        System.out.println("Teste: Acesso negado para n√£o administrador");

        // Arrange
        int userId = 1;
        int adminId = 2;
        when(usuarioRepository.findById(adminId)).thenReturn(Optional.empty());

        // Act
        ResponseEntity<String> response = administradorController.desativarUsuario(userId, adminId);

        // Assert
        assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
        assertEquals("Acesso negado", response.getBody());
        System.out.println("‚úÖ Teste passou: Acesso corretamente negado");
    }

    @Test
    @DisplayName("üìã Listar administradores - Sucesso")
    void listarAdministradores_Sucesso() {
        System.out.println("Teste: Listagem de administradores");

        // Arrange
        Usuario admin1 = new Usuario(1, "Admin 1", "admin1@email.com", "senha", "Endere√ßo");
        admin1.setTipoUsuario("ADMIN");
        Usuario admin2 = new Usuario(2, "Admin 2", "admin2@email.com", "senha", "Endere√ßo");
        admin2.setTipoUsuario("ADMIN");

        when(administradorService.listarAdministradores()).thenReturn(List.of(admin1, admin2));

        // Act
        ResponseEntity<List<Usuario>> response = administradorController.listarAdministradores();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(2, response.getBody().size());
        assertTrue(response.getBody().stream().allMatch(u -> "ADMIN".equals(u.getTipoUsuario())));
        System.out.println("‚úÖ Teste passou: Listagem de admins retornou " + response.getBody().size() + " itens");
    }

    @Test
    @DisplayName("üîç Buscar usu√°rio detalhado - Sucesso")
    void buscarUsuarioDetalhado_Sucesso() {
        System.out.println("Teste: Busca detalhada de usu√°rio");

        // Arrange
        int userId = 1;
        Usuario usuario = new Usuario(userId, "Usu√°rio", "user@email.com", "senha", "Endere√ßo");
        when(administradorService.buscarUsuarioDetalhado(userId)).thenReturn(usuario);

        // Act
        ResponseEntity<Usuario> response = administradorController.buscarUsuarioDetalhado(userId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(userId, response.getBody().getId());
        System.out.println("‚úÖ Teste passou: Usu√°rio encontrado - " + response.getBody().getNome());
    }

    @Test
    @DisplayName("üîç Buscar usu√°rio detalhado - N√£o encontrado")
    void buscarUsuarioDetalhado_NaoEncontrado() {
        System.out.println("Teste: Busca detalhada de usu√°rio inexistente");

        // Arrange
        int userId = 99;
        when(administradorService.buscarUsuarioDetalhado(userId))
                .thenThrow(new EntityNotFoundException("Usu√°rio n√£o encontrado"));

        // Act
        ResponseEntity<Usuario> response = administradorController.buscarUsuarioDetalhado(userId);

        // Assert
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        System.out.println("‚úÖ Teste passou: Usu√°rio n√£o encontrado (como esperado)");
    }

    @Test
    @DisplayName("üëë Remover privil√©gios admin - Sucesso")
    void removerPrivilegiosAdmin_Sucesso() {
        System.out.println("Teste: Remo√ß√£o de privil√©gios de admin");

        // Arrange
        int userId = 2;
        int adminId = 1;
        Usuario admin = new Usuario(adminId, "Admin", "admin@email.com", "senha", "Endere√ßo");
        admin.setTipoUsuario("ADMIN");

        when(usuarioRepository.findById(adminId)).thenReturn(Optional.of(admin));
        doNothing().when(administradorService).removerPrivilegiosAdmin(userId);

        // Act
        ResponseEntity<String> response = administradorController.removerPrivilegiosAdmin(userId, adminId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Privil√©gios de administrador removidos", response.getBody());
        verify(administradorService).removerPrivilegiosAdmin(userId);
        System.out.println("‚úÖ Teste passou: Privil√©gios removidos com sucesso");
    }

    @Test
    @DisplayName("üëë Remover privil√©gios admin - √öltimo admin")
    void removerPrivilegiosAdmin_UltimoAdmin() {
        System.out.println("Teste: Tentativa de remover √∫ltimo admin");

        // Arrange
        int userId = 1; // O √∫nico admin
        int adminId = 1;
        Usuario admin = new Usuario(adminId, "Admin", "admin@email.com", "senha", "Endere√ßo");
        admin.setTipoUsuario("ADMIN");

        when(usuarioRepository.findById(adminId)).thenReturn(Optional.of(admin));
        doThrow(new SecurityException("N√£o √© permitido remover o √∫ltimo administrador"))
                .when(administradorService).removerPrivilegiosAdmin(userId);

        // Act
        ResponseEntity<String> response = administradorController.removerPrivilegiosAdmin(userId, adminId);

        // Assert
        assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
        assertTrue(response.getBody().contains("√∫ltimo administrador"));
        System.out.println("‚úÖ Teste passou: Prote√ß√£o do √∫ltimo admin funcionou");
    }
}